[{"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js":"1","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js":"2","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js":"3","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js":"4","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js":"5","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js":"6","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js":"7","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js":"8","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js":"9","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\metricsNames.js":"10"},{"size":307,"mtime":1609949760353,"results":"11","hashOfConfig":"12"},{"size":591,"mtime":1609949803865,"results":"13","hashOfConfig":"12"},{"size":10613,"mtime":1609957502198,"results":"14","hashOfConfig":"12"},{"size":261,"mtime":1609949718027,"results":"15","hashOfConfig":"12"},{"size":5662,"mtime":1609954894515,"results":"16","hashOfConfig":"12"},{"size":2541,"mtime":1610054866611,"results":"17","hashOfConfig":"12"},{"size":272,"mtime":1609949767347,"results":"18","hashOfConfig":"12"},{"size":2324,"mtime":1609951416945,"results":"19","hashOfConfig":"12"},{"size":4514,"mtime":1609955971166,"results":"20","hashOfConfig":"12"},{"size":2265,"mtime":1610054779439,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"qlwrk8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js",[],["46","47"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js",["48","49"],"//\r\n//  LandingPage.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\n\r\n// Will probably move these into the abstracted component that renders the component based on the user's selection\r\nimport Blobs from '../Generators/Blobs/Blobs';\r\nimport LocalThickness from '../Filters/LocalThickness/LocalThickness';\r\nimport AboutPage from '../AboutPage/AboutPage';\r\nimport ContactPage from '../ContactPage/ContactPage';\r\n\r\nimport { generatorsNames } from '../../utils/generatorsNames';\r\nimport { filtersNames } from '../../utils/filtersNames';\r\nimport { metricsNames } from '../../utils/metricsNames';\r\n// import { networksNames } from '../../utils/networksNames';\r\n\r\nimport './LandingPage.css';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        paddingLeft: 240,\r\n        width: '100%',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n        // color: 'darkGrey',\r\n        // fontSize: '10',\r\n    },\r\n    collapseMenu: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n}));\r\n\r\n// import this and submodules names from a utils file to clean it up?\r\nconst porespyModules = ['Generators', 'Filters', 'Metrics', 'About', 'Contact'];\r\n\r\nconst LandingPage = () => {\r\n    const [openGenerators, setOpenGenerators] = useState(false);\r\n    const [openFilters, setOpenFilters] = useState(false);\r\n    const [openMetrics, setOpenMetrics] = useState(false);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [chosenModule, setChosenModule] = useState(\"Generators\");\r\n    const [chosenGenerator, setChosenGenerator] = useState(\"Blobs\");\r\n    const [chosenFilter, setChosenFilter] = useState(\"Apply Chords\");\r\n    const [chosenMetric, setChosenMetric] = useState(\"Chord Counts\");\r\n    // const [chosenNetwork, setChosenNetwork] = useState(\"\"); // should a default to the chosenNetwork state variable.\r\n\r\n    const handleClick = (text) => {        \r\n        // Switch/Case block checks to see which module is chosen and opens the <Collapse /> component.\r\n        switch (text) {\r\n            case \"Generators\":\r\n                setOpenGenerators(!openGenerators);\r\n                setOpen(!open);\r\n                break;\r\n            case \"Filters\":\r\n                setOpenFilters(!openFilters);\r\n                setOpen(!open);\r\n                break; \r\n            case \"Metrics\":\r\n                setOpenMetrics(!openMetrics);\r\n                setOpen(!open);\r\n                break;        \r\n            case \"About\":\r\n                setOpen(false);\r\n                break; \r\n            case \"Contact\":\r\n                setOpen(false);\r\n                break; \r\n            default:\r\n                break;\r\n        }\r\n        \r\n        // chosenModule state records which module (generators, filters, etc.) is chosen by the user.\r\n        if (text) {\r\n            setChosenModule(text);\r\n        }\r\n    };\r\n\r\n    const handleFunctionClick = (text, chosenFunc) => {\r\n        switch (text) {\r\n            case \"Generators\":\r\n                setChosenGenerator(chosenFunc);\r\n                break;\r\n            case \"Filters\":\r\n                setChosenFilter(chosenFunc);\r\n                break;\r\n            case \"Metrics\":\r\n                setChosenMetric(chosenFunc);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Porespy\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <Toolbar />\r\n                    <div className={classes.drawerContainer}>\r\n                        <List\r\n                            component=\"nav\"\r\n                            aria-labelledby=\"nested-list-subheader\"\r\n                            className={classes.root}\r\n                        >\r\n                            {\r\n                                porespyModules.map((text, index) => (                                        \r\n                                    <div>\r\n                                        <ListItem button onClick={() => handleClick(text)}>\r\n                                            <ListItemText primary={text} />\r\n                                            {(text !== \"About\" && text !== \"Contact\") && <KeyboardArrowDownIcon />}\r\n                                        </ListItem>\r\n                                        <Collapse \r\n                                            in={(\r\n                                                (text === \"Generators\" && openGenerators)\r\n                                                || (text === \"Filters\" && openFilters)\r\n                                                || (text === \"Metrics\" && openMetrics)\r\n                                            )} \r\n                                            timeout=\"auto\" \r\n                                            unmountOnExit\r\n                                        >\r\n                                            <List component=\"div\" disablePadding>\r\n                                                {/* Can probably change this to a standalone component with a prop passing in the text variable. */}\r\n\r\n                                                {\r\n                                                    (text === \"Generators\") && generatorsNames.map((g) => (\r\n                                                        <ListItem button className={classes.nested} onClick={() => handleFunctionClick(text, g.name)}>\r\n                                                            <ListItemText primary={`${g.name}`} />\r\n                                                        </ListItem>\r\n                                                    ))\r\n                                                }\r\n                                                {\r\n                                                    (text === \"Filters\") && filtersNames.map((g) => (\r\n                                                        <ListItem button className={classes.nested} onClick={() => handleFunctionClick(text, g.name)}>\r\n                                                            <ListItemText primary={`${g.name}`} />\r\n                                                        </ListItem>\r\n                                                    ))\r\n                                                }\r\n                                                {\r\n                                                    (text === \"Metrics\") && metricsNames.map((g) => (\r\n                                                        <ListItem button className={classes.nested} onClick={() => handleFunctionClick(text, g.name)}>\r\n                                                            <ListItemText primary={`${g.name}`} />\r\n                                                        </ListItem>\r\n                                                    ))\r\n                                                }\r\n                                            </List>\r\n                                        </Collapse>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                        <Divider />\r\n                    </div>\r\n                </Drawer>\r\n\r\n                <main className={classes.content}>\r\n                    <Toolbar />\r\n                    <div className=\"title\">\r\n                        PoreSpy\r\n                    </div>                        \r\n                    <div className=\"description\">\r\n                        A python library of image analysis tools used to extract information from 3D images of porous materials\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        Upon landing, here goes a generic landing page message\r\n                    </div>\r\n\r\n                    <div>{chosenGenerator}</div>\r\n                    <div>{chosenFilter}</div>\r\n                    <div>{chosenMetric}</div>\r\n                    \r\n                    {\r\n                        // TODO: these will probably follow a certain pattern, so make these into a component with 2 props (chosenModule, chosenFunction), then render the component?\r\n                        // Can section these descoupled components by module (ex: Generators, Filters, Metrics)\r\n                        chosenModule === \"Generators\" && chosenGenerator === \"Blobs\" && <Blobs />\r\n                    }\r\n                    {\r\n                        chosenModule === \"Filters\" && chosenFilter === \"Local Thickness\" && <LocalThickness />\r\n                    }\r\n                    {\r\n                        chosenModule === \"About\" && <AboutPage />\r\n                    }\r\n                    {\r\n                        chosenModule === \"Contact\" && <ContactPage />\r\n                    }\r\n                </main>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js",[],["50","51"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js",["52","53"],"//\r\n//  Blob.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport './Blobs.css';\r\n\r\nconst Blobs = () => {\r\n    const [xDimension, setXDimension] = useState(500);\r\n    const [yDimension, setYDimension] = useState(500);\r\n    const [porosity, setPorosity] = useState(0.5);\r\n    const [blobiness, setBlobiness] = useState(1);\r\n    const [generator, setGenerator] = useState('');\r\n    const [generatorTime, setGeneratorTime] = useState('');\r\n\r\n    const generateBlob = () => {\r\n        const startTime = moment();\r\n\r\n        axios.put('http://localhost:8000/porespygenerator/1/', {\r\n                porosity,\r\n                blobiness,\r\n                dimension_x: xDimension,\r\n                dimension_y: yDimension\r\n            }\r\n        ).then(({ data: { generated_image } }) => {\r\n            setGenerator(generated_image);\r\n            const timeElapsed = ((moment() - startTime) / 1000).toString();\r\n            const timeElapsedFormatted = `Time taken to generate blob: ${timeElapsed} seconds.`;\r\n            setGeneratorTime(timeElapsedFormatted);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            setGeneratorTime(\"Looks like an error has occurred...\");\r\n        });\r\n    }\r\n\r\n    const validateParams = () => {\r\n        const blobParameters = [xDimension, yDimension, porosity, blobiness];\r\n        return blobParameters.includes(\"\") ? true : false;\r\n    }\r\n\r\n    const integerOnlyField = (e) => {\r\n        const regExp = /[^0-9]/g;\r\n        const integersOnly = e.target.value.replace(regExp, '');\r\n        e.target.value = integersOnly;\r\n        return integersOnly;\r\n    }\r\n\r\n    const floatOnlyField = (e) => {\r\n        const regExpFullDecimal = /^(?:[0](?:\\.\\d+)?|1(?:\\.0+)?)$/g;\r\n        const regExpZeroOrOne = /^[0]\\.$/g;\r\n        const regExpDefault = /[^0-1]/g;\r\n\r\n        let floatsOnly = \"\";\r\n        if (regExpFullDecimal.test(e.target.value) || regExpZeroOrOne.test(e.target.value)) {\r\n            floatsOnly = e.target.value;\r\n        } else if (regExpDefault.test(e.target.value)) {\r\n            floatsOnly = e.target.value.slice(0, -1);\r\n        }\r\n\r\n        e.target.value = floatsOnly;\r\n        return floatsOnly;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"blobButton\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => generateBlob()} \r\n                    disabled={validateParams()}\r\n                >\r\n                    Generate Image\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"blobTextFields\">\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"xDimensionInput\"\r\n                        label=\"Voxels in x-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setXDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"yDimensionInput\"\r\n                        label=\"Voxels in y-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setYDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"porosityInput\"\r\n                        label=\"Porosity\"\r\n                        defaultValue=\"0.5\"\r\n                        helperText=\"Decimal value betweeen 0 and 1.\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyFloats = floatOnlyField(e);\r\n                            setPorosity(onlyFloats);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"blobinessInput\"\r\n                        label=\"Blobiness\"\r\n                        defaultValue=\"1\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setBlobiness(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                generator !== '' \r\n                &&\r\n                <div className=\"blobImageWrapper\">\r\n                    <img \r\n                        className=\"blobImage\" \r\n                        src={`data:image/png;base64,${generator}`} \r\n                    />\r\n                    <div>{generatorTime}</div>\r\n                </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blobs;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js",["54","55","56"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\metricsNames.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":27,"nodeType":"63","messageId":"64","endLine":6,"endColumn":36},{"ruleId":"65","severity":1,"message":"66","line":60,"column":5,"nodeType":"67","messageId":"68","endLine":60,"endColumn":9},{"ruleId":"57","replacedBy":"69"},{"ruleId":"59","replacedBy":"70"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":27,"nodeType":"63","messageId":"64","endLine":6,"endColumn":36},{"ruleId":"71","severity":1,"message":"72","line":145,"column":21,"nodeType":"73","endLine":148,"endColumn":23},{"ruleId":"61","severity":1,"message":"74","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":13},{"ruleId":"61","severity":1,"message":"75","line":16,"column":11,"nodeType":"63","messageId":"64","endLine":16,"endColumn":18},{"ruleId":"61","severity":1,"message":"76","line":40,"column":11,"nodeType":"63","messageId":"64","endLine":40,"endColumn":23},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected",["77"],["78"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","'filters' is assigned a value but never used.","'handleChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]