[{"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js":"1","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js":"2","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js":"3","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js":"4","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js":"5","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js":"6","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js":"7","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js":"8","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js":"9","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\metricsNames.js":"10"},{"size":307,"mtime":1609949760353,"results":"11","hashOfConfig":"12"},{"size":591,"mtime":1609949803865,"results":"13","hashOfConfig":"12"},{"size":9148,"mtime":1610056195599,"results":"14","hashOfConfig":"12"},{"size":261,"mtime":1609949718027,"results":"15","hashOfConfig":"12"},{"size":5662,"mtime":1609954894515,"results":"16","hashOfConfig":"12"},{"size":2541,"mtime":1610054866611,"results":"17","hashOfConfig":"12"},{"size":272,"mtime":1609949767347,"results":"18","hashOfConfig":"12"},{"size":2324,"mtime":1609951416945,"results":"19","hashOfConfig":"12"},{"size":4514,"mtime":1609955971166,"results":"20","hashOfConfig":"12"},{"size":2265,"mtime":1610054779439,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"qlwrk8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js",[],["46","47"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js",["48","49"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js",[],["50","51"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js",["52","53"],"//\r\n//  Blob.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport './Blobs.css';\r\n\r\nconst Blobs = () => {\r\n    const [xDimension, setXDimension] = useState(500);\r\n    const [yDimension, setYDimension] = useState(500);\r\n    const [porosity, setPorosity] = useState(0.5);\r\n    const [blobiness, setBlobiness] = useState(1);\r\n    const [generator, setGenerator] = useState('');\r\n    const [generatorTime, setGeneratorTime] = useState('');\r\n\r\n    const generateBlob = () => {\r\n        const startTime = moment();\r\n\r\n        axios.put('http://localhost:8000/porespygenerator/1/', {\r\n                porosity,\r\n                blobiness,\r\n                dimension_x: xDimension,\r\n                dimension_y: yDimension\r\n            }\r\n        ).then(({ data: { generated_image } }) => {\r\n            setGenerator(generated_image);\r\n            const timeElapsed = ((moment() - startTime) / 1000).toString();\r\n            const timeElapsedFormatted = `Time taken to generate blob: ${timeElapsed} seconds.`;\r\n            setGeneratorTime(timeElapsedFormatted);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            setGeneratorTime(\"Looks like an error has occurred...\");\r\n        });\r\n    }\r\n\r\n    const validateParams = () => {\r\n        const blobParameters = [xDimension, yDimension, porosity, blobiness];\r\n        return blobParameters.includes(\"\") ? true : false;\r\n    }\r\n\r\n    const integerOnlyField = (e) => {\r\n        const regExp = /[^0-9]/g;\r\n        const integersOnly = e.target.value.replace(regExp, '');\r\n        e.target.value = integersOnly;\r\n        return integersOnly;\r\n    }\r\n\r\n    const floatOnlyField = (e) => {\r\n        const regExpFullDecimal = /^(?:[0](?:\\.\\d+)?|1(?:\\.0+)?)$/g;\r\n        const regExpZeroOrOne = /^[0]\\.$/g;\r\n        const regExpDefault = /[^0-1]/g;\r\n\r\n        let floatsOnly = \"\";\r\n        if (regExpFullDecimal.test(e.target.value) || regExpZeroOrOne.test(e.target.value)) {\r\n            floatsOnly = e.target.value;\r\n        } else if (regExpDefault.test(e.target.value)) {\r\n            floatsOnly = e.target.value.slice(0, -1);\r\n        }\r\n\r\n        e.target.value = floatsOnly;\r\n        return floatsOnly;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"blobButton\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => generateBlob()} \r\n                    disabled={validateParams()}\r\n                >\r\n                    Generate Image\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"blobTextFields\">\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"xDimensionInput\"\r\n                        label=\"Voxels in x-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setXDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"yDimensionInput\"\r\n                        label=\"Voxels in y-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setYDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"porosityInput\"\r\n                        label=\"Porosity\"\r\n                        defaultValue=\"0.5\"\r\n                        helperText=\"Decimal value betweeen 0 and 1.\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyFloats = floatOnlyField(e);\r\n                            setPorosity(onlyFloats);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"blobinessInput\"\r\n                        label=\"Blobiness\"\r\n                        defaultValue=\"1\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setBlobiness(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                generator !== '' \r\n                &&\r\n                <div className=\"blobImageWrapper\">\r\n                    <img \r\n                        className=\"blobImage\" \r\n                        src={`data:image/png;base64,${generator}`} \r\n                    />\r\n                    <div>{generatorTime}</div>\r\n                </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blobs;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js",["54","55","56"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js",[],["57","58"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\metricsNames.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":27,"nodeType":"65","messageId":"66","endLine":6,"endColumn":36},{"ruleId":"67","severity":1,"message":"68","line":60,"column":5,"nodeType":"69","messageId":"70","endLine":60,"endColumn":9},{"ruleId":"59","replacedBy":"71"},{"ruleId":"61","replacedBy":"72"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":27,"nodeType":"65","messageId":"66","endLine":6,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":145,"column":21,"nodeType":"75","endLine":148,"endColumn":23},{"ruleId":"63","severity":1,"message":"76","line":7,"column":8,"nodeType":"65","messageId":"66","endLine":7,"endColumn":13},{"ruleId":"63","severity":1,"message":"77","line":16,"column":11,"nodeType":"65","messageId":"66","endLine":16,"endColumn":18},{"ruleId":"63","severity":1,"message":"78","line":40,"column":11,"nodeType":"65","messageId":"66","endLine":40,"endColumn":23},{"ruleId":"59","replacedBy":"79"},{"ruleId":"61","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected",["81"],["82"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","'filters' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["81"],["82"],"no-global-assign","no-unsafe-negation"]