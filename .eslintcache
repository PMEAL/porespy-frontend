[{"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js":"1","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js":"2","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js":"3","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js":"4","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js":"5","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js":"6","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js":"7","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\RenderGenerator\\RenderGenerator.js":"8","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\RenderFilter\\RenderFilter.js":"9","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\RenderMetric\\RenderMetric.js":"10","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\BundleOfTubes\\BundleOfTubes.js":"11","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\OverlappingSpheres\\OverlappingSpheres.js":"12","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\PolydisperseSpheres\\PolydisperseSpheres.js":"13","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\VoronoiEdges\\VoronoiEdges.js":"14","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\RSA\\RSA.js":"15","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\PerlinNoise\\PerlinNoise.js":"16","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\InsertShape\\InsertShape.js":"17","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Cylinders\\Cylinders.js":"18","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\LatticeSpheres\\LatticeSpheres.js":"19","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\LineSegment\\LineSegment.js":"20","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\reducers\\porespyfuncs.js":"21","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\actions\\porespyfuncs.js":"22","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\store\\configureStore.js":"23","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\DefaultPage\\DefaultPage.js":"24","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\reducers\\backend.js":"25","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\actions\\backend.js":"26","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\NotFoundPage\\NotFoundPage.js":"27","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\fieldValidators.js":"28","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\fileManipulators.js":"29","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\UploadImage\\UploadImage.js":"30","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\parseModuleNames.js":"31","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\reducers\\Generators\\GeneratedImages.js":"32","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\actions\\Generators\\GeneratedImages.js":"33"},{"size":524,"mtime":1611956950703,"results":"34","hashOfConfig":"35"},{"size":2344,"mtime":1613343180787,"results":"36","hashOfConfig":"35"},{"size":13120,"mtime":1613344015823,"results":"37","hashOfConfig":"35"},{"size":2897,"mtime":1613361211488,"results":"38","hashOfConfig":"35"},{"size":10468,"mtime":1613446928198,"results":"39","hashOfConfig":"35"},{"size":540,"mtime":1610300242699,"results":"40","hashOfConfig":"35"},{"size":581,"mtime":1613360916524,"results":"41","hashOfConfig":"35"},{"size":2186,"mtime":1612817969761,"results":"42","hashOfConfig":"35"},{"size":577,"mtime":1610816574601,"results":"43","hashOfConfig":"35"},{"size":400,"mtime":1610816628168,"results":"44","hashOfConfig":"35"},{"size":7511,"mtime":1613446949660,"results":"45","hashOfConfig":"35"},{"size":339,"mtime":1610816736278,"results":"46","hashOfConfig":"35"},{"size":343,"mtime":1610816760934,"results":"47","hashOfConfig":"35"},{"size":309,"mtime":1610816784410,"results":"48","hashOfConfig":"35"},{"size":263,"mtime":1610816772830,"results":"49","hashOfConfig":"35"},{"size":304,"mtime":1610816747508,"results":"50","hashOfConfig":"35"},{"size":304,"mtime":1610816681137,"results":"51","hashOfConfig":"35"},{"size":293,"mtime":1610816669691,"results":"52","hashOfConfig":"35"},{"size":319,"mtime":1610816711276,"results":"53","hashOfConfig":"35"},{"size":304,"mtime":1610816723806,"results":"54","hashOfConfig":"35"},{"size":383,"mtime":1612055669142,"results":"55","hashOfConfig":"35"},{"size":373,"mtime":1612055639711,"results":"56","hashOfConfig":"35"},{"size":806,"mtime":1613343151480,"results":"57","hashOfConfig":"35"},{"size":667,"mtime":1612055194777,"results":"58","hashOfConfig":"35"},{"size":369,"mtime":1612055693927,"results":"59","hashOfConfig":"35"},{"size":395,"mtime":1612055620330,"results":"60","hashOfConfig":"35"},{"size":279,"mtime":1612111829563,"results":"61","hashOfConfig":"35"},{"size":1418,"mtime":1612815137654,"results":"62","hashOfConfig":"35"},{"size":763,"mtime":1612815095294,"results":"63","hashOfConfig":"35"},{"size":471,"mtime":1613186483445,"results":"64","hashOfConfig":"35"},{"size":356,"mtime":1613187853575,"results":"65","hashOfConfig":"35"},{"size":410,"mtime":1613343093881,"results":"66","hashOfConfig":"35"},{"size":308,"mtime":1613342964346,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"qlwrk8",{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js",[],["141","142"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js",["143","144"],"//\r\n//  PoreSpyApp.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Redirect, Switch, Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { startSetPorespyFuncs } from '../../actions/porespyfuncs';\r\nimport { startSetBackendEndpoint } from '../../actions/backend';\r\nimport LandingPage from '../LandingPage/LandingPage';\r\nimport NotFoundPage from '../NotFoundPage/NotFoundPage';\r\n\r\nlet porespyFuncs = {};\r\nlet backendRootEndpoint = \"http://localhost:8000/\";\r\n\r\nconst PoreSpyApp = (props) => {    \r\n    useEffect(() => {\r\n        axios.get(`${backendRootEndpoint}porespyfuncs/1/`)\r\n        .then(({ data: { porespy_funcs } }) => {\r\n            porespyFuncs = porespy_funcs;\r\n            props.startSetPorespyFuncs(porespy_funcs);\r\n            props.startSetBackendEndpoint(backendRootEndpoint);\r\n        }).catch((e) => {\r\n\r\n            // TODO: find a better error catching method?\r\n            console.log(e);\r\n            \r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Router basename=\"\">\r\n                <Switch>                \r\n                    {/* Render LandingPage component with page prop passed in. */}\r\n                    {/* page prop will depend on how the user reaches the site (ex: localhost:3000/about vs localhost:3000/contact vs localhost:3000/) */}\r\n                    <Route path=\"/\" exact render={() => (\r\n                        <LandingPage page=\"\" porespyFuncs={porespyFuncs} />\r\n                    )}/>\r\n                    <Route path=\"/about\" render={() => (\r\n                        <LandingPage page=\"about\" porespyFuncs={porespyFuncs} />\r\n                    )}/>\r\n                    <Route path=\"/contact\" render={() => (\r\n                        <LandingPage page=\"contact\" porespyFuncs={porespyFuncs} />\r\n                    )}/>\r\n                    <Route path=\"*\" component={NotFoundPage} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    startSetPorespyFuncs: () => dispatch(startSetPorespyFuncs(porespyFuncs)),\r\n    startSetBackendEndpoint: () => dispatch(startSetBackendEndpoint(backendRootEndpoint))\r\n})\r\n\r\nexport default connect(undefined, mapDispatchToProps)(PoreSpyApp);\r\n",["145","146"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js",["147"],"//\r\n//  LandingPage.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React, { useState } from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Switch, Route, Link, BrowserRouter } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport AboutPage from '../AboutPage/AboutPage';\r\nimport ContactPage from '../ContactPage/ContactPage';\r\nimport RenderGenerator from '../RenderGenerator/RenderGenerator';\r\nimport RenderFilter from '../RenderFilter/RenderFilter';\r\nimport RenderMetric from '../RenderMetric/RenderMetric';\r\nimport { parseName } from '../../utils/parseModuleNames';\r\nimport './LandingPage.css';\r\n\r\n// Width of menu in pixels\r\nconst drawerWidth = 240;\r\n\r\n// TODO: abstract this object into another file to clean up this component?\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    contentOuter: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        paddingLeft: 240,\r\n        width: '100%',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4)\r\n    },\r\n    collapseMenu: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }, \r\n    gridList: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        maxWidth: 160,\r\n        minHeight: '95%',\r\n        position: 'absolute',\r\n        right: 3,\r\n        top: 64\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n}));\r\n\r\nconst LandingPage = (props) => {\r\n    const [openGenerators, setOpenGenerators] = useState(false);\r\n    const [openFilters, setOpenFilters] = useState(false);\r\n    const [openMetrics, setOpenMetrics] = useState(false);\r\n\r\n    const [chosenModule, setChosenModule] = useState(\"Generators\");\r\n    const [chosenGenerator, setChosenGenerator] = useState(\"\");\r\n    const [chosenFilter, setChosenFilter] = useState(\"Apply Chords\");\r\n    const [chosenMetric, setChosenMetric] = useState(\"Chord Counts\");\r\n    // const [chosenNetwork, setChosenNetwork] = useState(\"\"); // should a default to the chosenNetwork state variable.\r\n    const [renderPage, setRenderPage] = useState(props.page);\r\n    \r\n    // porespyModules contains the menu names that are then called with .map() to create on the UI.\r\n    const porespyModules = ['Generators', 'Filters', 'Metrics', 'About', 'Contact'];\r\n    const funcs = useSelector((state) => (state));\r\n    const generatorsNamesStore = funcs.porespyFuncs.hasOwnProperty('generators') ? Object.keys(funcs.porespyFuncs.generators) : [];\r\n    const filtersNamesStore = funcs.porespyFuncs.hasOwnProperty('filters') ? Object.keys(funcs.porespyFuncs.filters) : [];\r\n    const metricsNamesStore = funcs.porespyFuncs.hasOwnProperty('metrics') ? Object.keys(funcs.porespyFuncs.metrics) : [];\r\n\r\n    const generatorsNamesParsed = generatorsNamesStore.map((name) => parseName(name)).sort();\r\n    const filtersNamesParsed = filtersNamesStore.map((name) => parseName(name)).sort();\r\n    const metricsNamesParsed = metricsNamesStore.map((name) => parseName(name)).sort();\r\n\r\n    generatorsNamesParsed.unshift(\"Upload Image\");\r\n\r\n    const handleClick = (text) => {        \r\n        // Switch/Case block checks to see which module is chosen and opens the <Collapse /> component by calling setOpenGenerators(), setOpenFilters(), and setOpenMetrics()\r\n        // This block also calls setRenderPage() to render the correct page from the router (\"/\", \"/about\", \"/contact\")\r\n        switch (text) {\r\n            case \"Generators\":\r\n                setOpenGenerators(!openGenerators);\r\n                setRenderPage(\"\");\r\n                break;\r\n            case \"Filters\":\r\n                setOpenFilters(!openFilters);\r\n                setRenderPage(\"\");\r\n                break; \r\n            case \"Metrics\":\r\n                setOpenMetrics(!openMetrics);\r\n                setRenderPage(\"\");\r\n                break;\r\n            case \"About\":\r\n                setRenderPage(\"about\");\r\n                break;\r\n            case \"Contact\":\r\n                setRenderPage(\"contact\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        // chosenModule state records which module (generators, filters, etc.) is chosen by the user.\r\n        if (text) {\r\n            setChosenModule(text);\r\n        }\r\n    };\r\n\r\n    const handleFunctionClick = (text, chosenFunc) => {\r\n        switch (text) {\r\n            case \"Generators\":\r\n                setChosenGenerator(chosenFunc);\r\n                setRenderPage(\"\");\r\n                break;\r\n            case \"Filters\":\r\n                setChosenFilter(chosenFunc);\r\n                setRenderPage(\"\");\r\n                break;\r\n            case \"Metrics\":\r\n                setChosenMetric(chosenFunc);\r\n                setRenderPage(\"\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (text) {\r\n            setChosenModule(text);\r\n        }\r\n    }\r\n\r\n    const renderSubMenus = (text, modules) => (\r\n        modules.map((g) => (\r\n            <ListItem \r\n                button\r\n                className={classes.nested} \r\n                onClick={() => handleFunctionClick(text, g)} \r\n                component={Link}\r\n                to={`/`}\r\n            >\r\n                <ListItemText primary={g} />\r\n            </ListItem>\r\n        ))\r\n    )\r\n\r\n    const generatedImages = useSelector((state) => (state.generatedImages));\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            PoreSpy\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <BrowserRouter>\r\n                    <Drawer\r\n                        className={classes.drawer}\r\n                        variant=\"permanent\"\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <div className={classes.drawerContainer}>\r\n                            <List\r\n                                component=\"nav\"\r\n                                aria-labelledby=\"nested-list-subheader\"\r\n                                className={classes.root}\r\n                            >\r\n                                {\r\n                                    porespyModules.map((text) => (                                        \r\n                                        <div>\r\n                                            <ListItem \r\n                                                button \r\n                                                key={text} \r\n                                                component={Link} \r\n                                                to={text === \"About\" || text === \"Contact\" ? `/${text.toLowerCase()}` : `/`} \r\n                                                onClick={() => handleClick(text)}\r\n                                            >\r\n                                                <ListItemText primary={text} />\r\n                                                {(text !== \"About\" && text !== \"Contact\") && <KeyboardArrowDownIcon />}\r\n                                            </ListItem>\r\n                                            <Collapse \r\n                                                in={((text === \"Generators\" && openGenerators) || (text === \"Filters\" && openFilters) || (text === \"Metrics\" && openMetrics))} \r\n                                                timeout=\"auto\" \r\n                                                unmountOnExit\r\n                                            >\r\n                                                <List component=\"div\" disablePadding>\r\n                                                    {(text === \"Generators\") && renderSubMenus(text, generatorsNamesParsed)}\r\n                                                    {(text === \"Filters\") && renderSubMenus(text, filtersNamesParsed)}\r\n                                                    {(text === \"Metrics\") && renderSubMenus(text, metricsNamesParsed)}\r\n                                                </List>\r\n                                            </Collapse>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </List>\r\n                            <Divider />\r\n                        </div>\r\n                    </Drawer>\r\n\r\n                    <main className={classes.contentOuter}>\r\n                        <div className={classes.content}>\r\n                            <Toolbar />\r\n                            <div className=\"title\">\r\n                                PoreSpy\r\n                            </div>\r\n                            <div className=\"description\">\r\n                                Porous Media Image Analysis in Python\r\n                            </div>\r\n\r\n                            {/* The following 3 conditional render statements and the <switch></switch> element display the components based on which boolean is true */}\r\n                            {/* Rendering of the <AboutPage /> and <ContactPage /> is in the <switch></switch> element to preserve the routing (\"/about\", \"/contact\") */}\r\n                            { chosenModule === \"Generators\" && renderPage === \"\" && <RenderGenerator chosenFunction={chosenGenerator} />}\r\n                            { chosenModule === \"Filters\" && renderPage === \"\" && <RenderFilter chosenFunction={chosenFilter} /> }\r\n                            { chosenModule === \"Metrics\" && renderPage === \"\" && <RenderMetric chosenFunction={chosenMetric} /> }                        \r\n                            <Switch>\r\n                                <Route path=\"/about\" render={() => <AboutPage />} />\r\n                                <Route path=\"/contact\" render={() => <ContactPage />} />\r\n                            </Switch>    \r\n                        </div>\r\n\r\n                        <GridList cellHeight={180} className={classes.gridList}>\r\n                            {\r\n                                generatedImages.map((tile, index) => (\r\n                                    <GridListTile cols={2} key={tile.img}>\r\n                                        <img \r\n                                            src={`data:image/png;base64,${tile.img}`}\r\n                                            alt={index} \r\n                                        />\r\n                                        <GridListTileBar\r\n                                            title={`Image ${index}`}\r\n                                            subtitle={<span>text here!</span>}\r\n                                            actionIcon={\r\n                                                <IconButton aria-label={`info about ${index}`} className={classes.icon}>\r\n                                                <InfoIcon />\r\n                                                </IconButton>\r\n                                            }\r\n                                        />\r\n                                    </GridListTile>\r\n                                ))\r\n                            }\r\n                        </GridList>\r\n                    </main>\r\n                </BrowserRouter>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(undefined, undefined)(LandingPage);\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js",["148"],"//\r\n//  LocalThickness.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport './LocalThickness.css';\r\n\r\nconst LocalThickness = () => {\r\n    // https://github.com/PMEAL/porespy/blob/dev/porespy/filters/__funcs__.py\r\n    // These are filters that have \"im\" as a parameter and remaining parameters have default values.\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                Hello from Local Thickness Component\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocalThickness;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\RenderGenerator\\RenderGenerator.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\RenderFilter\\RenderFilter.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\RenderMetric\\RenderMetric.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\BundleOfTubes\\BundleOfTubes.js",["149","150","151"],"//\r\n//  BundleOfTubes.js\r\n//  porespy-frontend\r\n//\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport axios from 'axios';\r\nimport { integerOnlyField, floatOnlyBetweenOneAndZeroField, validateParams } from '../../../utils/fieldValidators';\r\nimport { startSetImages } from '../../../actions/Generators/GeneratedImages';\r\nimport './BundleOfTubes.css';\r\n\r\n\r\n// TODO: Add bundle of tubes images to the redux store, and the right panel.\r\nlet genImagesRedux = {};\r\n\r\nconst BundleOfTubes = (props) => {    \r\n    const backendEndpoint = useSelector((state) => state.backend);\r\n    const funcs = useSelector((state) => (state));\r\n    const fieldsInfo = funcs.porespyFuncs.hasOwnProperty('generators') ? funcs.porespyFuncs.generators.bundle_of_tubes : {};\r\n    \r\n    \r\n    if (fieldsInfo.hasOwnProperty('kwargs')) {\r\n        // remove kwargs from this function. As a result, no kwargs entry in the component will be generated.\r\n        delete fieldsInfo['kwargs'];\r\n    }\r\n\r\n    for (const entry in fieldsInfo) {\r\n        if (fieldsInfo[entry].type === \"int\") {\r\n            fieldsInfo[entry][\"helperText\"] = \"Integer Values only\";\r\n        } else if (fieldsInfo[entry].type === \"float\") {\r\n            fieldsInfo[entry][\"helperText\"] = \"Float value between 0 and 1\";\r\n        }\r\n\r\n        fieldsInfo[entry][\"id\"] = entry + \"input\";\r\n\r\n        switch (entry) {\r\n            case \"shape[0]\":\r\n                fieldsInfo[entry][\"label\"] = \"Voxels in x Dimension\";\r\n                break;\r\n            case \"shape[1]\":\r\n                fieldsInfo[entry][\"label\"] = \"Voxels in y Dimension\";\r\n                break;\r\n            case \"shape[2]\":\r\n                fieldsInfo[entry][\"label\"] = \"Voxels in z Dimension\";\r\n                break;\r\n            case \"spacing\":\r\n                fieldsInfo[entry][\"label\"] = \"Spacing\";\r\n                // NOTE: In Porespy documentation, there is no mention that the spacing parameter must be specified. In the code it is required as it is used in calculations.\r\n                fieldsInfo[entry][\"required\"] = true\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const [params, setParams] = useState(fieldsInfo);\r\n    const [validatedParams, setValidatedParams] = useState(true);\r\n    const [bundleOfTubes, setBundleOfTubes] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const generateBundleOfTubes = () => {\r\n        setLoading(true);\r\n        setBundleOfTubes(\"\");\r\n        setTimeout(() => {\r\n            axios.put(`${backendEndpoint}generators/bundleoftubes/1/`, {\r\n                dimension_x: params[\"shape[0]\"].value,\r\n                dimension_y: params[\"shape[1]\"].value,\r\n                dimension_z: params[\"shape[2]\"].value !== \"\" ? params[\"shape[2]\"].value : 0,\r\n                spacing: parseInt(params[\"spacing\"].value, 10)\r\n            }).then(({ data: { generated_image } }) => {\r\n                setBundleOfTubes(generated_image);\r\n                genImagesRedux = {\r\n                    img: generated_image\r\n                }\r\n                props.startSetImages(generated_image);\r\n                setLoading(false);\r\n            }).catch((e) => {\r\n                setBundleOfTubes(\"\");\r\n                setLoading(false);\r\n                setError(true);\r\n                setErrorMessage(`Something is wrong... ${e.message}`);\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n    const downloadBundleOfTubes = () => {\r\n        console.log(\"hello from downloadBundleOfTubes()\");\r\n    }\r\n\r\n    const parseEnteredValues = (e, property) => {\r\n        const tempParams = params;\r\n\r\n        switch (tempParams[property].type) {\r\n            case \"int\":\r\n                tempParams[property].value = integerOnlyField(e);\r\n                break;\r\n            case \"float\":\r\n                tempParams[property].value =  floatOnlyBetweenOneAndZeroField(e);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // TODO: maybe split this function to make it more scalable? ^^^\r\n        setParams(tempParams);\r\n        setValidatedParams(validateParams(params));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bundleOfTubesTitle\">\r\n                Bundle of Tubes\r\n            </div>\r\n            <div className=\"bundleOfTubesDescription\">\r\n                Creates a 3D image of a bundle of tubes, in the form of a rectangular plate with randomly sized holes through it.\r\n            </div>\r\n\r\n            <div className=\"bundleOfTubesTextFields\">\r\n                {\r\n                    // Dynamically creates <TextFields /> based on entries in the params object\r\n                    Object.keys(params).map((p) => (\r\n                        <div className=\"bundleOfTubesTextField\">\r\n                            <TextField \r\n                                required={params[p].required}\r\n                                id={params[p].id}\r\n                                label={params[p].label}\r\n                                defaultValue={params[p].value}\r\n                                helperText={params[p].helperText}\r\n                                variant={\"outlined\"}\r\n                                onInput={(e) => parseEnteredValues(e, p)}\r\n                            />\r\n                        </div>                        \r\n                    ))\r\n                }\r\n            </div>\r\n            <div className=\"bundleOfTubesButton\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => generateBundleOfTubes()}\r\n                    disabled={validatedParams}\r\n                    style={{ minWidth: '170px', minHeight: '16px'}}\r\n                >\r\n                    Generate Image\r\n                </Button>\r\n            </div>\r\n\r\n            {\r\n                // TODO: maybe asbtract this? This is similar in Blobs.js component\r\n                bundleOfTubes !== \"\"\r\n                ?\r\n                <div className=\"bundleOfTubesImageWrapper\">\r\n                    <img\r\n                        className=\"bundleOfTubesImage\"\r\n                        src={`data:image/png;base64,${bundleOfTubes}`}\r\n                    />\r\n                </div>\r\n                :\r\n                (\r\n                    loading\r\n                    ?\r\n                    <div className=\"spinner\">\r\n                        <CircularProgress />\r\n                        <div>\r\n                            Generating your image...\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        {\r\n                            error\r\n                            &&\r\n                            <div className=\"bundleOfTubesImageWrapper\">\r\n                                {errorMessage}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    startSetImages: () => dispatch(startSetImages(genImagesRedux))\r\n})\r\n\r\nexport default connect(undefined, mapDispatchToProps)(BundleOfTubes);\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\OverlappingSpheres\\OverlappingSpheres.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\PolydisperseSpheres\\PolydisperseSpheres.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\VoronoiEdges\\VoronoiEdges.js",[],["152","153"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\RSA\\RSA.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\PerlinNoise\\PerlinNoise.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\InsertShape\\InsertShape.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Cylinders\\Cylinders.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\LatticeSpheres\\LatticeSpheres.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\LineSegment\\LineSegment.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\reducers\\porespyfuncs.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\actions\\porespyfuncs.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\store\\configureStore.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\DefaultPage\\DefaultPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\reducers\\backend.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\actions\\backend.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\NotFoundPage\\NotFoundPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\fieldValidators.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\fileManipulators.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\UploadImage\\UploadImage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\parseModuleNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\reducers\\Generators\\GeneratedImages.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\actions\\Generators\\GeneratedImages.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":7,"column":35,"nodeType":"160","messageId":"161","endLine":7,"endColumn":43},{"ruleId":"162","severity":1,"message":"163","line":31,"column":8,"nodeType":"164","endLine":31,"endColumn":10,"suggestions":"165"},{"ruleId":"154","replacedBy":"166"},{"ruleId":"156","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":70,"column":5,"nodeType":"170","messageId":"171","endLine":70,"endColumn":9},{"ruleId":"158","severity":1,"message":"172","line":7,"column":8,"nodeType":"160","messageId":"161","endLine":7,"endColumn":13},{"ruleId":"158","severity":1,"message":"173","line":6,"column":27,"nodeType":"160","messageId":"161","endLine":6,"endColumn":36},{"ruleId":"158","severity":1,"message":"174","line":92,"column":11,"nodeType":"160","messageId":"161","endLine":92,"endColumn":32},{"ruleId":"175","severity":1,"message":"176","line":159,"column":21,"nodeType":"177","endLine":162,"endColumn":23},{"ruleId":"154","replacedBy":"178"},{"ruleId":"156","replacedBy":"179"},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["182"],["180"],["181"],"no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","'axios' is defined but never used.","'useEffect' is defined but never used.","'downloadBundleOfTubes' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["180"],["181"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},"Update the dependencies array to be: [props]",{"range":"185","text":"186"},[1061,1063],"[props]"]