[{"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js":"1","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js":"2","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js":"3","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js":"4","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js":"5"},{"size":262,"mtime":1607826557242,"results":"6","hashOfConfig":"7"},{"size":540,"mtime":1607826820940,"results":"8","hashOfConfig":"7"},{"size":458,"mtime":1608768326643,"results":"9","hashOfConfig":"7"},{"size":211,"mtime":1607826792259,"results":"10","hashOfConfig":"7"},{"size":4390,"mtime":1609111083255,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"qlwrk8",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js",[],["25","26"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js",["27","28"],"import React, { useState, useEffect } from 'react';\r\nimport Blobs from '../Generators/Blobs/Blobs';\r\nimport './LandingPage.css';\r\n\r\nconst LandingPage = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"title\">\r\n                PoreSpy\r\n            </div>\r\n            <div className=\"description\">\r\n                (Insert description here)\r\n            </div>\r\n            <Blobs />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js",["29","30","31","32","33"],"import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport './Blobs.css';\r\n\r\nconst Blobs = () => {\r\n    const [generatorParamsComplete, setGeneratorParamsComplete] = useState(false);\r\n    const [xDimension, setXDimension] = useState(500);\r\n    const [yDimension, setYDimension] = useState(500);\r\n    const [porosity, setPorosity] = useState(0.5);\r\n    const [blobiness, setBlobiness] = useState(1);\r\n    const [generator, setGenerator] = useState('');\r\n    const [generatorTime, setGeneratorTime] = useState('');\r\n\r\n    // TODO: validate porosity entry for a value between 0 and 1\r\n    // TODO: add CSS stylings to this component.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const generateBlob = () => {\r\n        const startTime = moment();\r\n\r\n        axios.put('http://localhost:8000/porespygenerator/1/', {\r\n                porosity,\r\n                blobiness,\r\n                dimension_x: xDimension,\r\n                dimension_y: yDimension\r\n            }\r\n        )\r\n        .then(({ data: { generated_image } }) => {\r\n            setGenerator(generated_image);\r\n            const timeElapsed = ((moment() - startTime) / 1000).toString();\r\n            const timeElapsedFormatted = `Time taken to generate blob: ${timeElapsed} seconds.`;\r\n            setGeneratorTime(timeElapsedFormatted);\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n            setGeneratorTime(\"Looks like an error has occurred...\");\r\n        });\r\n    }\r\n\r\n    const validateParams = () => {\r\n        const blobParameters = [xDimension, yDimension, porosity, blobiness];\r\n\r\n        if (blobParameters.includes(\"\") || generatorParamsComplete) {\r\n            return true;\r\n        } else if (\r\n            !isInt(xDimension)\r\n            || !isInt(yDimension)\r\n            || !isInt(blobiness)\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const isInt = (val) => {\r\n        return !isNaN(val) && parseInt(Number(val)) == val && !isNaN(parseInt(val, 10))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => generateBlob()} disabled={validateParams()}>\r\n                Generate Image\r\n            </Button>\r\n\r\n            <div>\r\n                <TextField\r\n                    required\r\n                    id=\"xDimensionInput\"\r\n                    label=\"Voxels in x-direction\"\r\n                    defaultValue=\"500\"\r\n                    helperText=\"Integer values only\"\r\n                    variant=\"outlined\"\r\n                    onInput={(e) => setXDimension(e.target.value)}\r\n                />\r\n                <TextField\r\n                    required\r\n                    id=\"yDimensionInput\"\r\n                    label=\"Voxels in y-direction\"\r\n                    defaultValue=\"500\"\r\n                    helperText=\"Integer values only\"\r\n                    variant=\"outlined\"\r\n                    onInput={(e) => setYDimension(e.target.value)}\r\n                />\r\n                <TextField\r\n                    required\r\n                    id=\"porosityInput\"\r\n                    label=\"Porosity\"\r\n                    defaultValue=\"0.5\"\r\n                    helperText=\"Decimal value betweeen 0 and 1.\"\r\n                    variant=\"outlined\"\r\n                    onInput={(e) => setPorosity(e.target.value)}\r\n                />\r\n                <TextField\r\n                    required\r\n                    id=\"blobinessInput\"\r\n                    label=\"Blobiness\"\r\n                    defaultValue=\"1\"\r\n                    helperText=\"Integer values only\"\r\n                    variant=\"outlined\"\r\n                    onInput={(e) => setBlobiness(e.target.value)}\r\n                />\r\n            </div>\r\n            \r\n            {\r\n                generator !== '' \r\n                &&\r\n                <div>\r\n                    <div></div>\r\n                    <img \r\n                        className=\"tutorialImage\" \r\n                        src={`data:image/png;base64,${generator}`} \r\n                    />\r\n                    <div>{generatorTime}</div>\r\n                </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blobs;\r\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"42","line":1,"column":27,"nodeType":"40","messageId":"41","endLine":1,"endColumn":36},{"ruleId":"38","severity":1,"message":"42","line":1,"column":27,"nodeType":"40","messageId":"41","endLine":1,"endColumn":36},{"ruleId":"38","severity":1,"message":"43","line":5,"column":10,"nodeType":"40","messageId":"41","endLine":5,"endColumn":20},{"ruleId":"38","severity":1,"message":"44","line":10,"column":37,"nodeType":"40","messageId":"41","endLine":10,"endColumn":63},{"ruleId":"45","severity":1,"message":"46","line":71,"column":53,"nodeType":"47","messageId":"48","endLine":71,"endColumn":55},{"ruleId":"49","severity":1,"message":"50","line":124,"column":21,"nodeType":"51","endLine":127,"endColumn":23},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'makeStyles' is defined but never used.","'setGeneratorParamsComplete' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]