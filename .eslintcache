[{"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js":"1","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js":"2","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js":"3","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js":"4","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js":"5","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js":"6","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js":"7","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js":"8","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js":"9"},{"size":262,"mtime":1607826557242,"results":"10","hashOfConfig":"11"},{"size":540,"mtime":1607826820940,"results":"12","hashOfConfig":"11"},{"size":9551,"mtime":1609867473770,"results":"13","hashOfConfig":"11"},{"size":211,"mtime":1607826792259,"results":"14","hashOfConfig":"11"},{"size":5617,"mtime":1609646105499,"results":"15","hashOfConfig":"11"},{"size":3055,"mtime":1609301100837,"results":"16","hashOfConfig":"11"},{"size":220,"mtime":1609860861872,"results":"17","hashOfConfig":"11"},{"size":1933,"mtime":1609861972533,"results":"18","hashOfConfig":"11"},{"size":451,"mtime":1609866010394,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qlwrk8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js",[],["43","44"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js",["45","46","47"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n// import ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\n\r\nimport Blobs from '../Generators/Blobs/Blobs';\r\nimport LocalThickness from '../Filters/LocalThickness/LocalThickness';\r\nimport AboutPage from '../AboutPage/AboutPage';\r\nimport ContactPage from '../ContactPage/ContactPage';\r\n\r\nimport { generatorsNames } from '../../utils/generatorsNames';\r\nimport { filtersNames } from '../../utils/filtersNames';\r\n\r\nimport './LandingPage.css';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        paddingLeft: 240,\r\n        width: '100%',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n        // color: 'darkGrey',\r\n        // fontSize: '10',\r\n    },\r\n    collapseMenu: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n}));\r\n\r\n// import this and submodules names from a utils file to clean it up?\r\nconst porespyModules = ['Generators', 'Filters', 'Metrics', 'About', 'Contact'];\r\n\r\nconst LandingPage = () => {\r\n    const [openGenerators, setOpenGenerators] = useState(false);\r\n    const [openFilters, setOpenFilters] = useState(false);\r\n    const [openMetrics, setOpenMetrics] = useState(false);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [chosenModule, setChosenModule] = useState(\"Generators\");\r\n    const [chosenGenerator, setChosenGenerator] = useState(\"Blobs\");\r\n\r\n    \r\n    // useEffect(() => {\r\n    //     console.log(chosenModule);\r\n    //     console.log(chosenGenerator);\r\n    // })\r\n\r\n    const handleClick = (text, pythonFunc) => {\r\n        console.log(text, pythonFunc);\r\n        // Switch/Case block checks to see which module is chosen and opens the <Collapse /> component.\r\n        switch (text) {\r\n            case \"Generators\":\r\n                setOpenGenerators(!openGenerators);\r\n                setOpen(!open);\r\n                setChosenGenerator(pythonFunc);\r\n                break;\r\n            case \"Filters\":\r\n                setOpenFilters(!openFilters);\r\n                setOpen(!open);\r\n                break; \r\n            case \"Metrics\":\r\n                setOpenMetrics(!openMetrics);\r\n                setOpen(!open);\r\n                break;        \r\n            case \"About\":\r\n                setOpen(false);\r\n                break; \r\n            case \"Contact\":\r\n                setOpen(false);\r\n                break; \r\n            default:\r\n                break;\r\n        }\r\n        \r\n        // chosenModule state records which module (generators, filters, etc.) is chosen by the user.\r\n        // setChosenModule(text);\r\n        if (text) {\r\n            setChosenModule(text);\r\n        }\r\n    };\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*\r\n                    <Blobs />\r\n                    <LocalThickness />\r\n                */}\r\n                <div className={classes.root}>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"fixed\" className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" noWrap>\r\n                                Porespy\r\n                            </Typography>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer\r\n                        className={classes.drawer}\r\n                        variant=\"permanent\"\r\n                        classes={{\r\n                        paper: classes.drawerPaper,\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <div className={classes.drawerContainer}>\r\n                            <List\r\n                                component=\"nav\"\r\n                                aria-labelledby=\"nested-list-subheader\"\r\n                                className={classes.root}\r\n                            >\r\n                                {\r\n                                    porespyModules.map((text, index) => (                                        \r\n                                        <div>\r\n                                            <ListItem button onClick={() => handleClick(text, null)}>\r\n                                                <ListItemText primary={text} />\r\n                                                {(text !== \"About\" && text !== \"Contact\") && <KeyboardArrowDownIcon />}\r\n                                            </ListItem>\r\n                                            <Collapse \r\n                                                in={(\r\n                                                    (text === \"Generators\" && openGenerators)\r\n                                                    || (text === \"Filters\" && openFilters)\r\n                                                    || (text === \"Metrics\" && openMetrics)\r\n                                                )} \r\n                                                timeout=\"auto\" \r\n                                                unmountOnExit\r\n                                            >\r\n                                                <List component=\"div\" disablePadding>\r\n\r\n                                                    {/* Can probably change this to a standalone component with a prop passing in the text variable. */}\r\n                                                    {\r\n                                                        (text === \"Generators\") && generatorsNames.map((g) => (\r\n                                                            <ListItem button className={classes.nested} onClick={() => handleClick(null, g.name)}>\r\n                                                                <ListItemText primary={`${g.name}`} />\r\n                                                                <KeyboardArrowDownIcon />\r\n                                                            </ListItem>\r\n                                                        ))\r\n                                                    }\r\n                                                    {\r\n                                                        (text === \"Filters\") && filtersNames.map((g) => (\r\n                                                            <ListItem button className={classes.nested}>\r\n                                                                <ListItemText primary={`${g.name}`} />\r\n                                                                <KeyboardArrowDownIcon />\r\n                                                            </ListItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </List>\r\n                                            </Collapse>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </List>\r\n                            <Divider />\r\n                        </div>\r\n                    </Drawer>\r\n\r\n                    <main className={classes.content}>\r\n                        <Toolbar />\r\n                        <div className=\"title\">\r\n                            PoreSpy\r\n                        </div>                        \r\n                        <div className=\"description\">\r\n                            A python library of image analysis tools used to extract information from 3D images of porous materials\r\n                        </div>\r\n                        <div className=\"description\">\r\n                            Upon landing, here goes a generic landing page message\r\n                        </div>\r\n\r\n                        {/*\r\n                            <Blobs />\r\n                        */}\r\n                        {\r\n                            chosenModule === \"Generators\" && <Blobs />\r\n                        }\r\n                        {\r\n                            chosenModule === \"Filters\" && <LocalThickness />\r\n                        }\r\n                        {\r\n                            chosenModule === \"About\" && <AboutPage />\r\n                        }\r\n                        {\r\n                            chosenModule === \"Contact\" && <ContactPage />\r\n                        }\r\n                    </main>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js",["48","49"],"import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport './Blobs.css';\r\n\r\nconst Blobs = () => {\r\n    const [xDimension, setXDimension] = useState(500);\r\n    const [yDimension, setYDimension] = useState(500);\r\n    const [porosity, setPorosity] = useState(0.5);\r\n    const [blobiness, setBlobiness] = useState(1);\r\n    const [generator, setGenerator] = useState('');\r\n    const [generatorTime, setGeneratorTime] = useState('');\r\n\r\n    const generateBlob = () => {\r\n        const startTime = moment();\r\n\r\n        axios.put('http://localhost:8000/porespygenerator/1/', {\r\n                porosity,\r\n                blobiness,\r\n                dimension_x: xDimension,\r\n                dimension_y: yDimension\r\n            }\r\n        ).then(({ data: { generated_image } }) => {\r\n            setGenerator(generated_image);\r\n            const timeElapsed = ((moment() - startTime) / 1000).toString();\r\n            const timeElapsedFormatted = `Time taken to generate blob: ${timeElapsed} seconds.`;\r\n            setGeneratorTime(timeElapsedFormatted);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            setGeneratorTime(\"Looks like an error has occurred...\");\r\n        });\r\n    }\r\n\r\n    const validateParams = () => {\r\n        const blobParameters = [xDimension, yDimension, porosity, blobiness];\r\n        return blobParameters.includes(\"\") ? true : false;\r\n    }\r\n\r\n    const integerOnlyField = (e) => {\r\n        const regExp = /[^0-9]/g;\r\n        const integersOnly = e.target.value.replace(regExp, '');\r\n        e.target.value = integersOnly;\r\n        return integersOnly;\r\n    }\r\n\r\n    const floatOnlyField = (e) => {\r\n        const regExpFullDecimal = /^(?:[0](?:\\.\\d+)?|1(?:\\.0+)?)$/g;\r\n        const regExpZeroOrOne = /^[0]\\.$/g;\r\n        const regExpDefault = /[^0-1]/g;\r\n\r\n        let floatsOnly = \"\";\r\n        if (regExpFullDecimal.test(e.target.value) || regExpZeroOrOne.test(e.target.value)) {\r\n            floatsOnly = e.target.value;\r\n        } else if (regExpDefault.test(e.target.value)) {\r\n            floatsOnly = e.target.value.slice(0, -1);\r\n        }\r\n\r\n        e.target.value = floatsOnly;\r\n        return floatsOnly;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"blobButton\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => generateBlob()} \r\n                    disabled={validateParams()}\r\n                >\r\n                    Generate Image\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"blobTextFields\">\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"xDimensionInput\"\r\n                        label=\"Voxels in x-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setXDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"yDimensionInput\"\r\n                        label=\"Voxels in y-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setYDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"porosityInput\"\r\n                        label=\"Porosity\"\r\n                        defaultValue=\"0.5\"\r\n                        helperText=\"Decimal value betweeen 0 and 1.\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyFloats = floatOnlyField(e);\r\n                            setPorosity(onlyFloats);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"blobinessInput\"\r\n                        label=\"Blobiness\"\r\n                        defaultValue=\"1\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setBlobiness(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                generator !== '' \r\n                &&\r\n                <div className=\"blobImageWrapper\">\r\n                    <img \r\n                        className=\"blobImage\" \r\n                        src={`data:image/png;base64,${generator}`} \r\n                    />\r\n                    <div>{generatorTime}</div>\r\n                </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blobs;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js",["50","51","52"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport axios from 'axios';\r\nimport './LocalThickness.css';\r\n\r\nconst LocalThickness = () => {\r\n    // These filters are taken from here:\r\n    // https://github.com/PMEAL/porespy/blob/dev/porespy/filters/__funcs__.py\r\n    // These are filters that have \"im\" as a parameter and remaining parameters have default values.\r\n    \r\n    //  TODO: ask what filters will be actually used?\r\n    const filters = [\r\n        \"Trim Small Clusters\",\r\n        \"Hold Peaks\",\r\n        \"Distance Transform Lin\",\r\n        \"Snow Partitioning\",\r\n        \"Snow Partitioning N\",\r\n        \"Find Disconnected Voxels\",\r\n        \"Fill Blind Pores\",\r\n        \"Trim Floating Solid\",\r\n        \"Trim Nonpercolating Paths\",\r\n        \"Trim Extrema\",\r\n        \"Flood\",\r\n        \"Region Size\",\r\n        \"Apply Chords\",\r\n        \"Apply Chords 3D\",\r\n        \"Local Thickness\",\r\n        \"Porosimetry\",\r\n        \"Trim Disconnected Blobs\",\r\n        \"NPhase Border\",\r\n        \"Snow Partitioning Parallel\",\r\n        \"Chunked Snow\",\r\n        \"Pad\"\r\n    ];\r\n\r\n    const handleChange = (e) => {\r\n        // For now, this function displays the chosen Filter value to the console.\r\n        // It is the same as the checkbox label, but the spaces are replaced with empty strings\r\n        console.log(e.target.name);\r\n    }\r\n\r\n    // const useStyles = makeStyles((theme) => ({\r\n    //     root: {\r\n    //       display: 'flex',\r\n    //       flexDirection: 'row'\r\n    //     },\r\n    //     formControl: {\r\n    //       margin: theme.spacing(3),\r\n    //     },\r\n    // }));\r\n\r\n    // const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"filters\">\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Filters</FormLabel>\r\n                        <FormGroup>\r\n                            {\r\n                                filters.map((filter) => {\r\n                                    const filterPythonName = filter.replace(/\\s/g, '_').toLowerCase();\r\n                                    return (\r\n                                        <FormControlLabel \r\n                                            control={<Checkbox name={filterPythonName}/>}\r\n                                            label={filter}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                        />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocalThickness;\r\n",["53","54"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":54,"column":5,"nodeType":"65","messageId":"66","endLine":54,"endColumn":9},{"ruleId":"59","severity":1,"message":"67","line":78,"column":12,"nodeType":"61","messageId":"62","endLine":78,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"69","line":140,"column":21,"nodeType":"70","endLine":143,"endColumn":23},{"ruleId":"59","severity":1,"message":"71","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":20},{"ruleId":"59","severity":1,"message":"72","line":7,"column":8,"nodeType":"61","messageId":"62","endLine":7,"endColumn":22},{"ruleId":"59","severity":1,"message":"73","line":9,"column":8,"nodeType":"61","messageId":"62","endLine":9,"endColumn":13},{"ruleId":"55","replacedBy":"74"},{"ruleId":"57","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","'chosenGenerator' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'makeStyles' is defined but never used.","'FormHelperText' is defined but never used.","'axios' is defined but never used.",["76"],["77"],"no-global-assign","no-unsafe-negation"]