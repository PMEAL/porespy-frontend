[{"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js":"1","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js":"2","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js":"3","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js":"4","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js":"5","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js":"6","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js":"7","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js":"8","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js":"9"},{"size":262,"mtime":1607826557242,"results":"10","hashOfConfig":"11"},{"size":540,"mtime":1607826820940,"results":"12","hashOfConfig":"11"},{"size":11075,"mtime":1609866082580,"results":"13","hashOfConfig":"11"},{"size":211,"mtime":1607826792259,"results":"14","hashOfConfig":"11"},{"size":5617,"mtime":1609646105499,"results":"15","hashOfConfig":"11"},{"size":3055,"mtime":1609301100837,"results":"16","hashOfConfig":"11"},{"size":220,"mtime":1609860861872,"results":"17","hashOfConfig":"11"},{"size":1933,"mtime":1609861972533,"results":"18","hashOfConfig":"11"},{"size":451,"mtime":1609866010394,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qlwrk8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\index.js",[],["42","43"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\PorespyApp\\PoreSpyApp.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\LandingPage\\LandingPage.js",["44","45"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\AboutPage\\AboutPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Generators\\Blobs\\Blobs.js",["46","47"],"import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport './Blobs.css';\r\n\r\nconst Blobs = () => {\r\n    const [xDimension, setXDimension] = useState(500);\r\n    const [yDimension, setYDimension] = useState(500);\r\n    const [porosity, setPorosity] = useState(0.5);\r\n    const [blobiness, setBlobiness] = useState(1);\r\n    const [generator, setGenerator] = useState('');\r\n    const [generatorTime, setGeneratorTime] = useState('');\r\n\r\n    const generateBlob = () => {\r\n        const startTime = moment();\r\n\r\n        axios.put('http://localhost:8000/porespygenerator/1/', {\r\n                porosity,\r\n                blobiness,\r\n                dimension_x: xDimension,\r\n                dimension_y: yDimension\r\n            }\r\n        ).then(({ data: { generated_image } }) => {\r\n            setGenerator(generated_image);\r\n            const timeElapsed = ((moment() - startTime) / 1000).toString();\r\n            const timeElapsedFormatted = `Time taken to generate blob: ${timeElapsed} seconds.`;\r\n            setGeneratorTime(timeElapsedFormatted);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            setGeneratorTime(\"Looks like an error has occurred...\");\r\n        });\r\n    }\r\n\r\n    const validateParams = () => {\r\n        const blobParameters = [xDimension, yDimension, porosity, blobiness];\r\n        return blobParameters.includes(\"\") ? true : false;\r\n    }\r\n\r\n    const integerOnlyField = (e) => {\r\n        const regExp = /[^0-9]/g;\r\n        const integersOnly = e.target.value.replace(regExp, '');\r\n        e.target.value = integersOnly;\r\n        return integersOnly;\r\n    }\r\n\r\n    const floatOnlyField = (e) => {\r\n        const regExpFullDecimal = /^(?:[0](?:\\.\\d+)?|1(?:\\.0+)?)$/g;\r\n        const regExpZeroOrOne = /^[0]\\.$/g;\r\n        const regExpDefault = /[^0-1]/g;\r\n\r\n        let floatsOnly = \"\";\r\n        if (regExpFullDecimal.test(e.target.value) || regExpZeroOrOne.test(e.target.value)) {\r\n            floatsOnly = e.target.value;\r\n        } else if (regExpDefault.test(e.target.value)) {\r\n            floatsOnly = e.target.value.slice(0, -1);\r\n        }\r\n\r\n        e.target.value = floatsOnly;\r\n        return floatsOnly;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"blobButton\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => generateBlob()} \r\n                    disabled={validateParams()}\r\n                >\r\n                    Generate Image\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"blobTextFields\">\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"xDimensionInput\"\r\n                        label=\"Voxels in x-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setXDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"yDimensionInput\"\r\n                        label=\"Voxels in y-direction\"\r\n                        defaultValue=\"500\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setYDimension(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"porosityInput\"\r\n                        label=\"Porosity\"\r\n                        defaultValue=\"0.5\"\r\n                        helperText=\"Decimal value betweeen 0 and 1.\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyFloats = floatOnlyField(e);\r\n                            setPorosity(onlyFloats);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"blobTextField\">\r\n                    <TextField\r\n                        required\r\n                        id=\"blobinessInput\"\r\n                        label=\"Blobiness\"\r\n                        defaultValue=\"1\"\r\n                        helperText=\"Integer values only\"\r\n                        variant=\"outlined\"\r\n                        onInput={(e) => {\r\n                            const onlyIntegers = integerOnlyField(e);\r\n                            setBlobiness(onlyIntegers);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                generator !== '' \r\n                &&\r\n                <div className=\"blobImageWrapper\">\r\n                    <img \r\n                        className=\"blobImage\" \r\n                        src={`data:image/png;base64,${generator}`} \r\n                    />\r\n                    <div>{generatorTime}</div>\r\n                </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blobs;\r\n","C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\Filters\\LocalThickness\\LocalThickness.js",["48","49","50"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport axios from 'axios';\r\nimport './LocalThickness.css';\r\n\r\nconst LocalThickness = () => {\r\n    // These filters are taken from here:\r\n    // https://github.com/PMEAL/porespy/blob/dev/porespy/filters/__funcs__.py\r\n    // These are filters that have \"im\" as a parameter and remaining parameters have default values.\r\n    \r\n    //  TODO: ask what filters will be actually used?\r\n    const filters = [\r\n        \"Trim Small Clusters\",\r\n        \"Hold Peaks\",\r\n        \"Distance Transform Lin\",\r\n        \"Snow Partitioning\",\r\n        \"Snow Partitioning N\",\r\n        \"Find Disconnected Voxels\",\r\n        \"Fill Blind Pores\",\r\n        \"Trim Floating Solid\",\r\n        \"Trim Nonpercolating Paths\",\r\n        \"Trim Extrema\",\r\n        \"Flood\",\r\n        \"Region Size\",\r\n        \"Apply Chords\",\r\n        \"Apply Chords 3D\",\r\n        \"Local Thickness\",\r\n        \"Porosimetry\",\r\n        \"Trim Disconnected Blobs\",\r\n        \"NPhase Border\",\r\n        \"Snow Partitioning Parallel\",\r\n        \"Chunked Snow\",\r\n        \"Pad\"\r\n    ];\r\n\r\n    const handleChange = (e) => {\r\n        // For now, this function displays the chosen Filter value to the console.\r\n        // It is the same as the checkbox label, but the spaces are replaced with empty strings\r\n        console.log(e.target.name);\r\n    }\r\n\r\n    // const useStyles = makeStyles((theme) => ({\r\n    //     root: {\r\n    //       display: 'flex',\r\n    //       flexDirection: 'row'\r\n    //     },\r\n    //     formControl: {\r\n    //       margin: theme.spacing(3),\r\n    //     },\r\n    // }));\r\n\r\n    // const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"filters\">\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Filters</FormLabel>\r\n                        <FormGroup>\r\n                            {\r\n                                filters.map((filter) => {\r\n                                    const filterPythonName = filter.replace(/\\s/g, '_').toLowerCase();\r\n                                    return (\r\n                                        <FormControlLabel \r\n                                            control={<Checkbox name={filterPythonName}/>}\r\n                                            label={filter}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                        />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocalThickness;\r\n",["51","52"],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\components\\ContactPage\\ContactPage.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\generatorsNames.js",[],"C:\\Users\\Andres\\ReactProjects\\porespy-frontend\\src\\utils\\filtersNames.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":54,"column":5,"nodeType":"63","messageId":"64","endLine":54,"endColumn":9},{"ruleId":"57","severity":1,"message":"58","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"66","line":140,"column":21,"nodeType":"67","endLine":143,"endColumn":23},{"ruleId":"57","severity":1,"message":"68","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":20},{"ruleId":"57","severity":1,"message":"69","line":7,"column":8,"nodeType":"59","messageId":"60","endLine":7,"endColumn":22},{"ruleId":"57","severity":1,"message":"70","line":9,"column":8,"nodeType":"59","messageId":"60","endLine":9,"endColumn":13},{"ruleId":"53","replacedBy":"71"},{"ruleId":"55","replacedBy":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'makeStyles' is defined but never used.","'FormHelperText' is defined but never used.","'axios' is defined but never used.",["73"],["74"],"no-global-assign","no-unsafe-negation"]